package euler;

import java.util.HashMap;
import java.util.Map;

public class P2_Even_Fibonacci_numbers {
	/*
	 * https://projecteuler.net/problem=2
	 * 
	 * Each new term in the Fibonacci sequence is generated by adding the previous
	 * two terms. By starting with 1 and 2, the first 10 terms will be:
	 * 
	 * 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
	 * 
	 * By considering the terms in the Fibonacci sequence whose values do not exceed
	 * four million, find the sum of the even-valued terms.
	 */

	Map<Integer, Long> fibonacciSeriesMap = new HashMap<>();

	public static void main(String[] args) {
		System.out.println("Result = " + new P2_Even_Fibonacci_numbers().execute(4_000_000L));
	}

	public Long execute(Long limit) {
		buildFibonacciSeriesMap(limit);
		long sum = 0l;

		for (long number : fibonacciSeriesMap.values()) {
			if (number % 2 == 0) {
				sum += number;
			}
		}

		return sum;
	}

	private void buildFibonacciSeriesMap(Long limit) {
		fibonacciSeriesMap = new HashMap<>();
		fibonacciSeriesMap.put(1, 1L);
		fibonacciSeriesMap.put(2, 2L);
		Long nextFionacciNumber = 1 + 2L;
		for (int i = 3; nextFionacciNumber < limit; i++) {
			fibonacciSeriesMap.put(i, nextFionacciNumber);
			nextFionacciNumber = fibonacciSeriesMap.get(i) + fibonacciSeriesMap.get(i - 1);
		}
	}

	// Online Code---------------------

	// f(x) = f(x-2)+4*f(x-1)

	public Long execute2(Long limit) {
		long a1 = 2l;
		long a2 = 8l;
		long nextNumber = 0l;
		long sum = a1 + a2;
		
		while (a2 < limit) {
			sum += nextNumber;
			nextNumber = a1 + 4 * a2;
			a1 = a2;
			a2 = nextNumber;

		}

		return sum;

	}

}
